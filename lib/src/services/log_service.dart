import 'dart:io';

import '../enum/logs_export_type.dart';

/// An abstract class that defines the contract for a logging service.
abstract class ILogService {
  /// Gets the directory where application logs are stored.
  ///
  /// This directory contains log files generated by the application.
  Future<Directory> get appLogsDirectory;

  /// Gets the directory where exported log files (zipped logs) are stored.
  ///
  /// This is typically used for sharing or backing up logs.
  Future<Directory> get appLogsZipDirectory;

  /// Writes a log message to a specific log file.
  ///
  /// - [fileName]: The name of the log file (without extension).
  /// - [message]: The log message to be written.
  ///
  /// This method should append log messages to the specified log file.
  Future<void> log({
    required String fileName,
    required String message,
  });

  /// Clears all stored logs from the application log directory.
  ///
  /// This method deletes all log files to free up storage or reset logging.
  Future<void> clearAllLogs();

  /// Exports log files based on the given [exportType].
  ///
  /// - [exportType]: Specifies the type of logs to export.
  /// - [logZipFilePrefix]: An optional prefix for the exported log ZIP file.
  ///
  /// Returns the file path of the exported log ZIP file, or `null` if the export fails.
  Future<String?> exportLogFiles(
    LogsExportType exportType, {
    String? logZipFilePrefix,
  });

  /// Clears log files that are older than the specified number of [days].
  ///
  /// - [days]: The number of days; logs older than this will be deleted.
  ///
  /// This method is useful for log retention policies.
  Future<void> clearLogsBefore({required int days});
}
